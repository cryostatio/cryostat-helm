suite: test deployment.yaml
templates:
  - deployment.yaml

tests:
  - it: should verify general deployment settings
    asserts:
      - equal:
          path: kind
          value: Deployment
      - equal:
          path: metadata.name
          value: RELEASE-NAME-cryostat
      - equal:
          path: spec.replicas
          value: 1
      - equal:
          path: spec.strategy.type
          value: Recreate
      - equal:
          path: metadata.labels
          value:
            helm.sh/chart: cryostat-0.5.0-dev
            app.kubernetes.io/name: cryostat
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/version: "4.0.0-dev"
            app.kubernetes.io/managed-by: Helm

  - it: should validate all container settings including environment variables and security contexts
    asserts:
      - exists:
          path: spec.template.spec.containers[?(@.name=='cryostat')]
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat')].image
          value: "quay.io/cryostat/cryostat:4.0.0-snapshot"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-authproxy')].image
          value: "quay.io/oauth2-proxy/oauth2-proxy:latest"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat')].env[?(@.name=='QUARKUS_HTTP_PORT')].value
          value: "8181"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat')].env[?(@.name=='STORAGE_BUCKETS_ARCHIVES_NAME')].value
          value: "archivedrecordings"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat')].livenessProbe.httpGet.path
          value: "/health/liveness"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat')].startupProbe.httpGet.path
          value: "/health/liveness"

  - it: should validate volumes and volume mounts
    asserts:
      - exists:
          path: spec.template.spec.volumes[?(@.name=='alpha-config')]
      - exists:
          path: spec.template.spec.containers[?(@.name=='cryostat-authproxy')].volumeMounts[?(@.mountPath=='/etc/oauth2_proxy/alpha_config')]

  - it: should validate container ports and network settings
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat')].ports[0].containerPort
          value: 8181
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-storage')].ports[0].containerPort
          value: 8333

  - it: should set image pull secrets if specified
    set:
      imagePullSecrets:
        - name: myregistrykey
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "myregistrykey"

  - it: should configure the OpenShift OAuth Proxy when authentication.openshift is enabled
    set:
      authentication.openshift.enabled: true
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[?(@.name=='cryostat-authproxy')].image
          pattern: "quay.io/cryostat/openshift-oauth-proxy:.*"

  - it: should configure the OAuth2 Proxy when OpenShift OAuth is disabled and OAuth2 is enabled
    set:
      authentication.openshift.enabled: false
      authentication.oauth2.enabled: true
    asserts:
    - exists:
        path: spec.template.spec.containers[?(@.name=='cryostat-authproxy')]
    - matchRegex:
        path: spec.template.spec.containers[?(@.name=='cryostat-authproxy')].image
        pattern: "quay.io/oauth2-proxy/oauth2-proxy:.*"

  - it: should apply Kubernetes specific settings when configured
    set:
      nodeSelector:
        disktype: ssd
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: disktype
                operator: In
                values:
                - ssd
      tolerations:
      - key: "key"
        operator: "Equal"
        value: "value"
        effect: "NoSchedule"
    asserts:
      - exists:
          path: spec.template.spec.nodeSelector
      - exists:
          path: spec.template.spec.affinity
      - exists:
          path: spec.template.spec.tolerations

  - it: should ensure the datasource container has correct environment variables and resources
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-jfr-datasource')].env[?(@.name=='QUARKUS_HTTP_PORT')].value
          value: "8800"
      - exists:
          path: spec.template.spec.containers[?(@.name=='cryostat-jfr-datasource')].resources

  - it: should validate security contexts for each container
    asserts:
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - exists:
          path: spec.template.spec.containers[?(@.name=='cryostat')].securityContext.capabilities.drop
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat')].securityContext.capabilities.drop[0]
          value: "ALL"

  - it: should verify image pull policies for each container
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat')].imagePullPolicy
          value: Always
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-authproxy')].imagePullPolicy
          value: Always
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-storage')].imagePullPolicy
          value: Always
  
  - it: should verify image pull policies for development snapshots
    set:
      core.image.tag: "4.0.0-snapshot"
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat')].imagePullPolicy
          value: Always
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-authproxy')].imagePullPolicy
          value: Always
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-storage')].imagePullPolicy
          value: Always

  - it: should verify image pull policies for release versions
    set:
      core.image.tag: "4.1.0"
      core.image.pullPolicy: "IfNotPresent"
      oauth2Proxy.image.pullPolicy: "IfNotPresent"
      storage.image.pullPolicy: "IfNotPresent"
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat')].imagePullPolicy
          value: "IfNotPresent"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-authproxy')].imagePullPolicy
          value: "IfNotPresent"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-storage')].imagePullPolicy
          value: "IfNotPresent"

  - it: should verify pod selector labels and pod labels
    asserts:
      - equal:
          path: spec.selector.matchLabels
          value:
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/name: cryostat
      - equal:
          path: spec.template.metadata.labels
          value:
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/name: cryostat
